{"version":3,"sources":["GameState.ts","Book.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","Machine","id","initial","context","chapter","history","choices","inventory","events","states","reading","on","target","cond","SELECT_OPTION","actions","gameOver","type","selectOption","assign","setHistory","event","saveChoices","option","updateInventory","addsItems","removesItems","filter","i","includes","Array","from","Set","updateEvents","addsEvents","guards","didReachEnding","isEnding","validState","requiredItems","requiredEvents","excludingItems","excludingEvents","hasRequiredItems","every","hasRequiredEvents","avoidedItems","avoidedEvents","Book","hasRequiredState","optionId","hasEvents","hasItems","Text","onChoose","hasTextAlign","isSize","title","className","dangerouslySetInnerHTML","__html","text","options","map","opt","key","isColor","disabled","onClick","App","useMachine","JSON","parse","localStorage","getItem","current","send","React","useEffect","setItem","stringify","isCentered","e","length","item","name","window","location","reload","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b298db22.chunk.js","sourcesContent":["import { Machine, assign } from 'xstate';\n\n/*\n  events:\n    readChapter\n*/\n\ninterface StateType {\n  chapter: number;\n  history: number[];\n  choices: number[];\n  inventory: number[];\n  events: number[];\n}\n\nconst GameState = Machine<StateType>(\n  {\n    id: 'game-state',\n    initial: 'reading',\n    context: {\n      chapter: 1,\n      history: [],\n      choices: [],\n      inventory: [],\n      events: []\n    },\n    states: {\n      reading: {\n        on: {\n          '': [\n            {\n              target: 'gameOver',\n              cond: 'didReachEnding'\n            }\n          ],\n          SELECT_OPTION: {\n            target: 'reading',\n            actions: [\n              'selectOption',\n              'setHistory',\n              'saveChoices',\n              'updateInventory',\n              'updateEvents'\n            ],\n            cond: 'validState'\n          }\n        }\n      },\n\n      gameOver: {\n        on: {},\n        type: 'final'\n      }\n    }\n  },\n  {\n    actions: {\n      selectOption: assign({ chapter: (context, { target }) => target }),\n\n      setHistory: assign((context, event) => {\n        return {\n          ...context,\n          history: [...context.history, event.target]\n        };\n      }),\n\n      saveChoices: assign((context, event) => {\n        return {\n          ...context,\n          choices: [...context.choices, event.option]\n        };\n      }),\n\n      updateInventory: assign((context, { chapter }) => {\n        const { addsItems = [], removesItems = [] } = chapter;\n\n        if (!addsItems && !removesItems) {\n          return context;\n        }\n\n        const inventory = [...context.inventory, ...addsItems].filter(\n          (i: number) => !removesItems.includes(i)\n        );\n\n        return {\n          ...context,\n          inventory: Array.from(new Set(inventory))\n        };\n      }),\n\n      updateEvents: assign((context, event) => {\n        if (!event.chapter.addsEvents) {\n          return context;\n        }\n        return {\n          ...context,\n          events: [...context.events, ...event.chapter.addsEvents]\n        };\n      })\n    },\n    guards: {\n      didReachEnding: (context, event) => {\n        return event.isEnding;\n      },\n      validState: (context, { chapter }) => {\n        const {\n          requiredItems = [],\n          requiredEvents = [],\n          excludingItems = [],\n          excludingEvents = []\n        } = chapter;\n\n        const hasRequiredItems = requiredItems.every((i: number) =>\n          context.events.includes(i)\n        );\n        const hasRequiredEvents = requiredEvents.every((i: number) =>\n          context.inventory.includes(i)\n        );\n        const avoidedItems = excludingItems.every(\n          (i: number) => !context.events.includes(i)\n        );\n        const avoidedEvents = excludingEvents.every(\n          (i: number) => !context.inventory.includes(i)\n        );\n\n        return (\n          hasRequiredItems && hasRequiredEvents && avoidedItems && avoidedEvents\n        );\n      }\n    }\n  }\n);\n\nexport default GameState;\n","import bookData from './bookData.json';\nimport { BookData } from './Types';\n\nconst Book: BookData = bookData;\n\nexport default Book;\n","import React from 'react';\nimport {\n  Container,\n  Columns,\n  Column,\n  Button,\n  Title,\n  Content,\n  Box\n} from 'bloomer';\nimport { useMachine } from '@xstate/react';\nimport GameState from './GameState';\nimport Book from './Book';\nimport './App.css';\n\nfunction hasRequiredState(optionId: number, context: any) {\n  const option = Book.option[optionId];\n  const { events, inventory } = context;\n  const {\n    requiredItems = [],\n    requiredEvents = [],\n    excludingItems = [],\n    excludingEvents = []\n  } = option;\n\n  if (!(requiredEvents || requiredItems)) {\n    return true;\n  }\n\n  const hasEvents = requiredEvents.every(i => events.includes(i));\n  const hasItems = requiredItems.every(i => inventory.includes(i));\n  const avoidedEvents = excludingEvents.every(i => !events.includes(i));\n  const avoidedItems = excludingItems.every(i => !inventory.includes(i));\n\n  return hasEvents && hasItems && avoidedEvents && avoidedItems;\n}\n\ninterface TextProps {\n  chapter: {\n    title: string;\n    text: string;\n    options: number[];\n  };\n  context: Object;\n  onChoose: Function;\n}\n\nconst Text: React.FC<TextProps> = ({ chapter, context, onChoose }) => {\n  return (\n    <>\n      <Title hasTextAlign='centered' isSize={2}>\n        {chapter.title}\n      </Title>\n      <Content>\n        <div\n          className='body-text'\n          dangerouslySetInnerHTML={{ __html: chapter.text }}\n        />\n        {chapter.options.map(opt => (\n          <Container key={opt}>\n            <Button\n              isColor='light'\n              key={opt}\n              disabled={!hasRequiredState(opt, context)}\n              onClick={() =>\n                onChoose({\n                  type: 'SELECT_OPTION',\n                  target: Book.option[opt].target,\n                  option: opt,\n                  chapter: chapter\n                })\n              }\n            >\n              {Book.option[opt].text}\n            </Button>\n          </Container>\n        ))}\n      </Content>\n    </>\n  );\n};\n\nconst App: React.FC = () => {\n  const [current, send] = useMachine(\n    GameState,\n    JSON.parse(localStorage.getItem('game-state') || '{}')\n  );\n\n  const chapter = Book.chapter[current.context.chapter];\n\n  React.useEffect(() => {\n    localStorage.setItem('game-state', JSON.stringify(current));\n  }, [current]);\n\n  return (\n    <Container>\n      <Columns isCentered>\n        <Column isSize='2/3'>\n          <Text\n            chapter={chapter}\n            context={current.context}\n            onChoose={(e: any) => send(e)}\n          />\n        </Column>\n        <Column isSize='1/3'>\n          <Box>\n            <Title isSize={4}>Inventory</Title>\n            <ul>\n              {!current.context.inventory.length && <li>Nothing here</li>}\n              {current.context.inventory.map(item => (\n                <li key={item}>{Book.item[item].name}</li>\n              ))}\n            </ul>\n          </Box>\n          <Box>\n            <pre>{JSON.stringify(current.context, null, 4)}</pre>\n          </Box>\n          <Button\n            isColor='warning'\n            onClick={() => {\n              localStorage.setItem('game-state', '{}');\n              window.location.reload();\n            }}\n          >\n            reset\n          </Button>\n        </Column>\n      </Columns>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}